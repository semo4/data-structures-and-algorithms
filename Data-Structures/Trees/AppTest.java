/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Trees;

import org.junit.Test;

import java.util.ArrayList;

import static org.junit.Assert.*;

public class AppTest {
    @Test
    public void testEmptyTree() {
       BinaryTree t = new BinaryTree();
       assertTrue("empty tree ", t.isEmpty());
    }

    @Test
    public void testSingleRootTree() {
        BinaryTree t = new BinaryTree(5);
        assertTrue("just the root in tree ", t.isEmpty());
    }

    @Test
    public void testSingleLiftRightChildTree() {
        BinaryTree t = new BinaryTree(5);
        t.add(8);
        t.add(2);
        ArrayList<Integer> exp = t.inOrder();
        assertEquals("output is  ",exp ,t.inOrder());
    }

    @Test
    public void testInOrderTree() {
        BinaryTree t = new BinaryTree(5);
        t.add(8);
        t.add(2);
        ArrayList<Integer> exp = t.inOrder();
        assertEquals("output is  ",exp ,t.inOrder());
    }

    @Test
    public void testPreOrderTree() {
        BinaryTree t = new BinaryTree(5);
        t.add(8);
        t.add(2);
        ArrayList<Integer> exp = t.preOrder();
        assertEquals("output is  ",exp ,t.preOrder());
    }

    @Test
    public void testPostOrderTree() {
        BinaryTree t = new BinaryTree(5);
        t.add(8);
        t.add(2);
        ArrayList<Integer> exp = t.postOrder();
        assertEquals("output is  ",exp ,t.postOrder());
    }
    
    @Test
    public void testFindMaxValueInTree() {
        BinaryTree t = new BinaryTree();
        t.add(10);
        t.add(8);
        t.add(12);
        t.add(11);
        t.add(9);
        t.add(7);
        t.add(13);
        int exp = 13;
        assertEquals("output is  ", exp, t.findMaximumValue());
    }
}
