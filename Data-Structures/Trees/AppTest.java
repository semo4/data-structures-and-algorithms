/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Trees;

import org.junit.Test;

import java.util.ArrayList;

import static org.junit.Assert.*;

public class AppTest {
    @Test
    public void testEmptyTree() {
       BinaryTree t = new BinaryTree();
       assertTrue("empty tree ", t.isEmpty());
    }

    @Test
    public void testSingleRootTree() {
        BinaryTree t = new BinaryTree(5);
        assertTrue("just the root in tree ", t.isEmpty());
    }

    @Test
    public void testSingleLiftRightChildTree() {
        BinaryTree t = new BinaryTree(5);
        t.add(8);
        t.add(2);
        ArrayList<Integer> exp = t.inOrder();
        assertEquals("output is  ",exp ,t.inOrder());
    }

    @Test
    public void testInOrderTree() {
        BinaryTree t = new BinaryTree(5);
        t.add(8);
        t.add(2);
        ArrayList<Integer> exp = t.inOrder();
        assertEquals("output is  ",exp ,t.inOrder());
    }

    @Test
    public void testPreOrderTree() {
        BinaryTree t = new BinaryTree(5);
        t.add(8);
        t.add(2);
        ArrayList<Integer> exp = t.preOrder();
        assertEquals("output is  ",exp ,t.preOrder());
    }

    @Test
    public void testPostOrderTree() {
        BinaryTree t = new BinaryTree(5);
        t.add(8);
        t.add(2);
        ArrayList<Integer> exp = t.postOrder();
        assertEquals("output is  ",exp ,t.postOrder());
    }
    
    @Test
    public void testFindMaxValueInTree() {
        BinaryTree t = new BinaryTree();
        t.add(10);
        t.add(8);
        t.add(12);
        t.add(11);
        t.add(9);
        t.add(7);
        t.add(13);
        int exp = 13;
        assertEquals("output is  ", exp, t.findMaximumValue());
    }

       @Test(expected=NullPointerException.class)
    public void testEmptyBreadthFirst() {
        BinaryTree t = new BinaryTree();

        assertEquals(new NullPointerException("Tree is Empty") ,t.breadthFirst());
    }
    @Test
    public void testBreadthFirstOneValue() {
        BinaryTree t = new BinaryTree();
        t.add(10);
        assertTrue("output is  ", t.breadthFirst().size() == 1);
    }
    @Test
    public void testBreadthFirstMultiValue() {

        BinaryTree t = new BinaryTree();
        t.add(10);
        t.add(8);
        t.add(12);
        t.add(11);
        t.add(9);
        t.add(7);
        t.add(13);

        ArrayList<Integer> exp = new ArrayList<Integer>();
        exp.add(10);
        exp.add(8);
        exp.add(12);
        exp.add(7);
        exp.add(9);
        exp.add(11);
        exp.add(13);
        assertEquals("output is  ",exp ,t.breadthFirst());
    }

    //********************************************
    // FizzBuzz 
    //
     @Test
    public void testFizzBuzzTreeEmpty(){
        BinaryTree b = new BinaryTree();
        FizzBuzzTree f = new FizzBuzzTree();
        assertTrue("the tree is empty", f.fizzBuzzTree(b).isEmpty());
    }
    @Test
    public void testFizzBuzzTreeDiviedByThree(){
        BinaryTree b = new BinaryTree();
        b.add(3);
        FizzBuzzTree f = new FizzBuzzTree();
        ArrayList<String> exp = new ArrayList<String>();
        exp.add("Fizz");
        assertEquals("the tree is Fizz",exp ,f.fizzBuzzTree(b).preOrder());
    }
    @Test
    public void testFizzBuzzTreeDiviedByFive(){
        BinaryTree b = new BinaryTree();
        b.add(5);
        FizzBuzzTree f = new FizzBuzzTree();
        ArrayList<String> exp = new ArrayList<String>();
        exp.add("Buzz");
        assertEquals("the tree is Buzz",exp ,f.fizzBuzzTree(b).preOrder());
    }
    @Test
    public void testFizzBuzzTreeDiviedByThreeAndFive(){
        BinaryTree b = new BinaryTree();
        b.add(15);
        FizzBuzzTree f = new FizzBuzzTree();
        ArrayList<String> exp = new ArrayList<String>();
        exp.add("FizzBuzz");
        assertEquals("the tree is Buzz",exp ,f.fizzBuzzTree(b).preOrder());
    }
    @Test
    public void testFizzBuzzTreeNotDiviedByThreeAndFive(){
        BinaryTree b = new BinaryTree();
        b.add(8);
        FizzBuzzTree f = new FizzBuzzTree();
        ArrayList<String> exp = new ArrayList<String>();
        exp.add("8");
        assertEquals("the tree is Buzz",exp ,f.fizzBuzzTree(b).preOrder());
    }
  
    @Test
    public void testTreeIntersectionEmpty(){
        BinaryTree test = new BinaryTree();
        BinaryTree b = new BinaryTree();
        BinaryTree t = new BinaryTree();

        assertNull("the tree empty",test.tree_Intersection(t,b));
    }

    @Test
    public void testTreeIntersectionEqualTree(){
        BinaryTree test = new BinaryTree();
        BinaryTree t = new BinaryTree();
            t.add(150);
            t.add(100);
            t.add(250);
            t.add(75);
            t.add(160);
            t.add(200);
            t.add(350);
            t.add(125);
            t.add(175);
            t.add(300);
            t.add(500);

        BinaryTree b = new BinaryTree();
            b.add(42);
            b.add(100);
            b.add(600);
            b.add(15);
            b.add(160);
            b.add(200);
            b.add(350);
            b.add(125);
            b.add(175);
            b.add(4);
            b.add(500);

        ArrayList<Integer> a = new ArrayList<>();
        a.add(100);
        a.add(125);
        a.add(160);
        a.add(200);
        a.add(175);
        a.add(350);
        a.add(500);


        assertEquals("the tree full",a,test.tree_Intersection(t,b));
    }

    @Test
    public void testTreeIntersectionNotEqualTree(){
        BinaryTree test = new BinaryTree();
        BinaryTree t = new BinaryTree();
        t.add(150);
        t.add(100);
        t.add(250);
        t.add(75);
        t.add(160);
        t.add(200);
        t.add(350);
        t.add(125);
        t.add(175);
        t.add(300);
        t.add(500);

        BinaryTree b = new BinaryTree();
        b.add(42);
        b.add(100);
        b.add(600);
        b.add(15);
        b.add(160);
        b.add(200);
        b.add(350);
        b.add(125);


        ArrayList<Integer> a = new ArrayList<>();
        a.add(100);
        a.add(125);
        a.add(160);
        a.add(200);
        a.add(350);


        assertEquals("the tree full",a,test.tree_Intersection(t,b));
    }
}
